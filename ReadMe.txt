1. Тестовое задание (файл в формате DOCX) лежит в корне.

2. В качестве формата хранения выбран JSON. Файл с данными (Passengers.json) лежит в корне.

3. Из сторонних пакетов использованы Newtonsoft.Json, CommunityToolkit.Mvvm, Microsoft.Xaml.Behaviors.Wpf.

4. Приложение (решение) разбито на 5 уровней: Tests (вспомогательный) - тесты, Ui, App, Domane, DataAccess, Infrastructure.

4.1. Уровень Ui (интерфейс)
    Проект Shell - основная часть приложения - точка входа. Здесь же расположены Представление приложения (MainView).

4.2. Уровень App (приложение).
    Проект ViewModels - модели представлений (в нашем случае одна - MainViewModel), по сути аналогичны контроллерам.
    MainViewModel работает с соответствующей Моделью (MainModel).
    
4.3. Уровень Domain (предметная область).
    На данном уровне расположена бизнес-логика, сосредоточенная в Модели (MainModel).
    Для получения данных Модель использует репозиторий и сущности уровня DataAccess.
    
4.4. Уровень DataAccess (уровень доступа к данным).
    Проект Repositories - получение данных из репозиториев. Реализована стратегия с возможностью выбора провайдера. В нашем случае используется JSON репозиторий (JsonRepo), работа с которым осуществляется посредством Newtonsoft.Json. 
    Проект Entities - сущности предметной области, в нашем случае одна - DepartingPassenger. XML репозиторий реализован частично (для примера).

4.5. Уровень Infrastructure (инфраструктура - всевозможные вспомогательные классы и методы расширения).
    - Подуровень AppComponents. AppExceptions - специфичные для приложения исключения. Resources - специфичные для приложения ресурсы (в нашем случае - иконки).
    - Подуровень WpfModule. CommonStyles - различные обобщенные стили для элементов WPF. Components - компоненты, расширяющие возможности WPF. Controls - "самодельные" элементы управления WPF. Extensions - методы расширения компонентов WPF. Ui - специализированные компоненты, используемые элементами управления WPF.
    - Проекты BaseComponents, BaseExtensions, Phrases (практически в такой же форме) используются мной почти во всех разрабатываемых приложениях. 

ПРИМЕЧАНИЯ:

1. Приложение выполнено в среде разработки JetBrains Rider. Использовался net 7.0 (core), c# 11.0.

2. Существует мнение, что сущности должны располагаться в отдельном, более "низком" уровне.

3. Если выполнить тест MainTests.FillPassengersTest, то на выходе получим JSON-файл с данными пассажиров (который можно использовать для работы приложения).